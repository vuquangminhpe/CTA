/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-useless-escape */
import React, { useState, useEffect } from 'react'
import { FileText, Check, AlertTriangle, HelpCircle, X, Wand2, BookOpen } from 'lucide-react'
import { toast } from 'sonner'
import AutoQuestionGenerator from './AutoQuestionGenerator'
import examApi from '../../apis/exam.api'
import { useQuery } from '@tanstack/react-query'

interface Question {
  content: string
  answers: string[]
  correct_index: number
  master_exam_id: string
}

interface BulkQuestionImportProps {
  onSubmit: (questions: Question[]) => void
  onCancel: () => void
}

const BulkQuestionImport: React.FC<BulkQuestionImportProps> = ({ onSubmit, onCancel }) => {
  const [rawText, setRawText] = useState('')
  const [parsedQuestions, setParsedQuestions] = useState<Question[]>([])
  const [isPreviewMode, setIsPreviewMode] = useState(false)
  const [parseError, setParseError] = useState<string | null>(null)
  const [selectedCorrectAnswers, setSelectedCorrectAnswers] = useState<Record<number, number>>({})
  const [isAutoGeneratorOpen, setIsAutoGeneratorOpen] = useState(false)
  const [master_exam_id, setMasterExamId] = useState('')

  useEffect(() => {
    if (!rawText.trim()) {
      setParsedQuestions([])
      setParseError(null)
      return
    }

    try {
      const questions = parseQuestionsFromText(rawText)
      setParsedQuestions(questions)

      // Initialize selected correct answers
      const initialCorrectAnswers: Record<number, number> = {}
      questions.forEach((_, index) => {
        initialCorrectAnswers[index] = 0 // Default to first answer
      })
      setSelectedCorrectAnswers(initialCorrectAnswers)

      setParseError(null)
    } catch (error) {
      setParsedQuestions([])
      setParseError((error as Error).message)
    }
  }, [rawText])

  // Parse questions from formatted text
  const parseQuestionsFromText = (text: string): Question[] => {
    const questions: Question[] = []
    const lines = text
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line)

    let currentQuestionIndex = -1
    let collectingAnswers = false

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]

      // Check for question
      if (
        line.toLowerCase().startsWith('câu') ||
        line.toLowerCase().startsWith('question') ||
        /^\d+[\.\:]\s/.test(line)
      ) {
        currentQuestionIndex++
        collectingAnswers = true
        questions[currentQuestionIndex] = {
          content: line.replace(/^(câu|question)\s*\d+[\.\:]?\s*/i, '').trim(),
          answers: [],
          correct_index: 1,
          master_exam_id
        }

        // If the question content is empty, use the entire line
        if (!questions[currentQuestionIndex].content) {
          questions[currentQuestionIndex].content = line
        }

        continue
      }

      // Check for answer options
      if (collectingAnswers && /^[A-Ea-e][\.\)\:]/.test(line)) {
        const answerContent = line.replace(/^[A-Ea-e][\.\)\:]\s*/, '').trim()
        questions[currentQuestionIndex].answers.push(answerContent)
      }
    }

    // Validate questions
    for (let i = 0; i < questions.length; i++) {
      if (questions[i].answers.length < 2) {
        throw new Error(`Question ${i + 1} needs at least 2 answer options. Only found ${questions[i].answers.length}.`)
      }
    }

    if (questions.length === 0) {
      throw new Error('No valid questions found. Please check your format.')
    }

    return questions
  }
  const { data: dataExams } = useQuery({
    queryKey: ['dataExams'],
    queryFn: () => examApi.getMasterExams()
  })
  const dataExam = dataExams?.data?.result || []

  // Handle correct answer selection
  const handleCorrectAnswerChange = (questionIndex: number, answerIndex: number) => {
    setSelectedCorrectAnswers((prev) => ({
      ...prev,
      [questionIndex]: answerIndex
    }))
  }

  // Handle submit
  const handleSubmit = () => {
    if (!master_exam_id) {
      toast.error('Vui lòng chọn kỳ thi áp dụng cho câu hỏi.')
      return
    }
    if (parsedQuestions.length === 0) {
      toast.error('No valid questions to import')
      return
    }

    // Apply correct answer selections
    const questionsWithCorrectAnswers = parsedQuestions.map((question, index) => ({
      ...question,
      correct_index: selectedCorrectAnswers[index] || 0
    }))

    onSubmit(questionsWithCorrectAnswers)
    toast.success(`${questionsWithCorrectAnswers.length} questions imported successfully`)
  }

  // Handle auto-generated questions
  const handleAutoGeneratedQuestions = (formattedQuestions: string, correctAnswers: Record<number, number>) => {
    // First set the raw text to trigger parsing
    setRawText(formattedQuestions)
    setIsAutoGeneratorOpen(false)

    // We need to wait for the parsing to complete before setting correct answers
    // and entering preview mode
    setTimeout(() => {
      if (formattedQuestions.trim()) {
        try {
          // Make sure the questions were parsed correctly
          const questions = parseQuestionsFromText(formattedQuestions)

          if (questions.length > 0) {
            // Set the correct answers from the API
            setSelectedCorrectAnswers(correctAnswers)

            // Now we can enter preview mode
            setIsPreviewMode(true)
          } else {
            toast.error('Không thể phân tích câu hỏi. Vui lòng kiểm tra lại định dạng.')
          }
        } catch (error) {
          toast.error('Lỗi khi phân tích câu hỏi: ' + (error as Error).message)
        }
      }
    }, 300)
  }

  return (
    <div className='bg-white shadow-lg rounded-lg overflow-hidden max-w-4xl mx-auto'>
      <div className='px-6 py-4 bg-blue-600 text-white flex justify-between items-center'>
        <div className='flex items-center'>
          <FileText className='h-5 w-5 mr-2' />
          <h3 className='text-lg font-medium'>Nhập câu hỏi hàng loạt</h3>
        </div>
        <button onClick={onCancel} className='text-black hover:text-black/60 focus:outline-none'>
          <X className='h-5 w-5' />
        </button>
      </div>

      <div className='p-6'>
        {isAutoGeneratorOpen ? (
          <AutoQuestionGenerator
            exam_id={master_exam_id}
            onGenerate={handleAutoGeneratedQuestions}
            onCancel={() => setIsAutoGeneratorOpen(false)}
          />
        ) : !isPreviewMode ? (
          <>
            <div className='mb-4'>
              <div className='flex justify-between items-center mb-2'>
                <label htmlFor='questionText' className='block text-sm font-medium text-gray-700'>
                  Dán câu hỏi của bạn bên dưới:
                </label>
                <div className='flex space-x-3'>
                  <button
                    type='button'
                    onClick={() => setRawText(getExampleText())}
                    className='text-sm text-blue-600 bg-white border border-gray-200 hover:text-blue-800 flex items-center'
                  >
                    <HelpCircle className='h-4 w-4 mr-1' />
                    Xem ví dụ
                  </button>
                  <div className='mb-4'>
                    <div className='flex items-center mb-1.5'>
                      <BookOpen className='h-4 w-4 text-gray-500 mr-2' />
                      <label htmlFor='master_exam_id' className='block text-sm font-medium text-gray-700'>
                        Kỳ thi áp dụng
                      </label>
                    </div>

                    <div className='relative'>
                      <select
                        id='master_exam_id'
                        name='master_exam_id'
                        value={master_exam_id}
                        onChange={(e) => setMasterExamId(e.target.value)}
                        className='block w-full pl-3 pr-10 py-2.5 text-base border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md shadow-sm transition-colors bg-white'
                      >
                        <option value=''>-- Chọn kỳ thi --</option>
                        {dataExam.map((exam: any) => (
                          <option key={exam._id} value={exam._id}>
                            {exam.name} {exam.exam_period ? `(${exam.exam_period})` : ''}
                          </option>
                        ))}
                      </select>
                    </div>

                    <p className='mt-1 text-xs text-gray-500'>
                      Câu hỏi này sẽ được áp dụng cho kỳ thi được chọn và các báo cáo liên quan
                    </p>
                  </div>

                  <button
                    type='button'
                    onClick={() => setIsAutoGeneratorOpen(true)}
                    className='text-sm bg-white border border-gray-200 text-purple-600 hover:text-purple-800 flex items-center'
                  >
                    <Wand2 className='h-4 w-4 mr-1' />
                    Tự động tạo câu hỏi
                  </button>
                </div>
              </div>
              <textarea
                id='questionText'
                rows={15}
                className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'
                value={rawText}
                onChange={(e) => setRawText(e.target.value)}
                placeholder='Câu 1: What is the capital of France?&#10;A. Paris&#10;B. London&#10;C. Berlin&#10;D. Rome&#10;&#10;Câu 2: ...'
              />
            </div>

            {parseError && (
              <div className='mb-4 p-3 bg-red-50 border border-red-200 rounded-md'>
                <div className='flex'>
                  <AlertTriangle className='h-5 w-5 text-red-400 mr-2' />
                  <span className='text-sm text-red-700'>{parseError}</span>
                </div>
              </div>
            )}

            <div className='flex justify-between items-center'>
              <span className='text-sm text-gray-500'>
                Tạo {parsedQuestions.length} câu hỏi hợp lệ{parsedQuestions.length !== 1 ? '' : ''}
              </span>
              <div className='space-x-3'>
                <button
                  type='button'
                  onClick={onCancel}
                  className='inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                >
                  Hủy bỏ
                </button>
                <button
                  type='button'
                  onClick={() => setIsPreviewMode(true)}
                  disabled={parsedQuestions.length === 0}
                  className='inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed'
                >
                  Xem trước câu hỏi
                </button>
              </div>
            </div>
          </>
        ) : (
          <>
            <div className='mb-4'>
              <h4 className='text-lg font-medium text-gray-900 mb-2'>Chọn câu trả lời đúng</h4>
              <p className='text-sm text-gray-500 mb-4'>
                Xem lại từng câu hỏi và chọn câu trả lời đúng. Theo mặc định, tùy chọn đầu tiên (A) được chọn.
              </p>

              <div className='space-y-6 max-h-[50vh] overflow-y-auto pr-2'>
                {parsedQuestions.map((question, questionIndex) => (
                  <div key={questionIndex} className='border border-gray-200 rounded-lg p-4 bg-gray-50'>
                    <h5 className='font-medium text-gray-900 mb-2'>
                      Câu hỏi {questionIndex + 1}: {question.content}
                    </h5>
                    <div className='ml-4 space-y-2'>
                      {question.answers.map((answer, answerIndex) => (
                        <div key={answerIndex} className='flex items-center'>
                          <input
                            type='radio'
                            id={`q${questionIndex}-a${answerIndex}`}
                            name={`question-${questionIndex}`}
                            checked={selectedCorrectAnswers[questionIndex] === answerIndex}
                            onChange={() => handleCorrectAnswerChange(questionIndex, answerIndex)}
                            className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300'
                          />
                          <label
                            htmlFor={`q${questionIndex}-a${answerIndex}`}
                            className={`ml-2 block text-sm ${
                              selectedCorrectAnswers[questionIndex] === answerIndex
                                ? 'font-medium text-blue-700'
                                : 'text-gray-700'
                            }`}
                          >
                            {String.fromCharCode(65 + answerIndex)}. {answer}
                          </label>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className='flex justify-between items-center'>
              <button
                type='button'
                onClick={() => setIsPreviewMode(false)}
                className='inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
              >
                Quay lại chỉnh sửa
              </button>
              <button
                type='button'
                onClick={handleSubmit}
                className='inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500'
              >
                <Check className='h-4 w-4 mr-1' />
                Nhập câu hỏi
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  )
}

// Helper function to get example text
const getExampleText = () => {
  return `Câu 1: What is the capital of France?
A. Paris
B. London
C. Berlin
D. Rome

Câu 2: Which of the following is NOT a programming language?
A. Python
B. Java
C. Windows
D. JavaScript

Question 3: What is the largest planet in our solar system?
A. Earth
B. Mars
C. Jupiter
D. Venus

4. Who wrote "Romeo and Juliet"?
A. Charles Dickens
B. William Shakespeare
C. Jane Austen
D. Mark Twain`
}

export default BulkQuestionImport
